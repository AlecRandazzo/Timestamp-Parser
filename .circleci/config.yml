# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5
jobs:
  build:
    docker:
      # specify the version
      - image: circleci/golang:1.13

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/AlecRandazzo/Timestamp-Parser
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run: go get -v -t -d ./...
      - run: go test -v ./... -race -coverprofile=coverage.txt -covermode=atomic
parameters:
  conf:
    description: Used to specify the location of the .codecov.yml config file
    type: string
    default: .codecov.yml
  file:
    description: Path to the code coverage data file to upload.
    type: string
    default: 'coverage.txt'
  flags:
    description: >-
      Flag the upload to group coverage metrics (e.g. unittests | integration |
      ui,chrome)
    type: string
    default: ''
  token:
    description: >-
      Set the private repository token (defaults to environment variable
      $CODECOV_TOKEN)
    type: string
    default: '${CODECOV_TOKEN}'
  upload_name:
    description: Custom defined name of the upload. Visible in Codecov UI
    type: string
    default: '${CIRCLE_BUILD_NUM}'
  when:
    description: When should this step run?
    type: string
    default: always
steps:
  - when:
      condition: << parameters.file >>
      steps:
        - run:
            name: Upload Coverage Results
            command: |
              curl -s https://codecov.io/bash | bash -s -- \
                -f "<< parameters.file >>" \
                -t "<< parameters.token >>" \
                -n "<< parameters.upload_name >>" \
                -y "<< parameters.conf >>" \
                -F "<< parameters.flags >>" \
                -Z || echo 'Codecov upload failed'
            when: << parameters.when >>
  - unless:
      condition: << parameters.file >>
      steps:
        - run:
            name: Upload Coverage Results
            command: |
              curl -s https://codecov.io/bash | bash -s -- \
                -t "<< parameters.token >>" \
                -n "<< parameters.upload_name >>" \
                -y "<< parameters.conf >>" \
                -F "<< parameters.flags >>" \
                -Z || echo 'Codecov upload failed'
            when: << parameters.when >>
